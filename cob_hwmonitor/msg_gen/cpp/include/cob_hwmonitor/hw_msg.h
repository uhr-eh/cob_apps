/* Auto-generated by genmsg_cpp for file /home/uhr-eh/git/care-o-bot/cob_apps/cob_hwmonitor/msg/hw_msg.msg */
#ifndef COB_HWMONITOR_MESSAGE_HW_MSG_H
#define COB_HWMONITOR_MESSAGE_HW_MSG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"

namespace cob_hwmonitor
{
template <class ContainerAllocator>
struct hw_msg_ : public ros::Message
{
  typedef hw_msg_<ContainerAllocator> Type;

  hw_msg_()
  : header()
  , temp_1_curr(0)
  , temp_1_min(0)
  , temp_1_max(0)
  , temp_2_curr(0)
  , temp_2_min(0)
  , temp_2_max(0)
  , temp_3_curr(0)
  , temp_3_min(0)
  , temp_3_max(0)
  , temp_4_curr(0)
  , temp_4_min(0)
  , temp_4_max(0)
  , temp_5_curr(0)
  , temp_5_min(0)
  , temp_5_max(0)
  , temp_6_curr(0)
  , temp_6_min(0)
  , temp_6_max(0)
  , akku_voltage_curr(0)
  , akku_voltage_min(0)
  , akku_voltage_max(0)
  , hals_motor_voltage_curr(0)
  , hals_motor_voltage_min(0)
  , hals_motor_voltage_max(0)
  , hals_logik_voltage_curr(0)
  , hals_logik_voltage_min(0)
  , hals_logik_voltage_max(0)
  , tablett_logik_voltage_curr(0)
  , tablett_logik_voltage_min(0)
  , tablett_logik_voltage_max(0)
  , arm_logik_voltage_curr(0)
  , arm_logik_voltage_min(0)
  , arm_logik_voltage_max(0)
  , tablett_motor_voltage_curr(0)
  , tablett_motor_voltage_min(0)
  , tablett_motor_voltage_max(0)
  , hals_motor_current_curr(0)
  , hals_motor_current_min(0)
  , hals_motor_current_max(0)
  , hals_logik_current_curr(0)
  , hals_logik_current_min(0)
  , hals_logik_current_max(0)
  , tablett_logik_current_curr(0)
  , tablett_logik_current_min(0)
  , tablett_logik_current_max(0)
  , arm_logik_current_curr(0)
  , arm_logik_current_min(0)
  , arm_logik_current_max(0)
  , tablett_motor_current_curr(0)
  , tablett_motor_current_min(0)
  , tablett_motor_current_max(0)
  {
  }

  hw_msg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , temp_1_curr(0)
  , temp_1_min(0)
  , temp_1_max(0)
  , temp_2_curr(0)
  , temp_2_min(0)
  , temp_2_max(0)
  , temp_3_curr(0)
  , temp_3_min(0)
  , temp_3_max(0)
  , temp_4_curr(0)
  , temp_4_min(0)
  , temp_4_max(0)
  , temp_5_curr(0)
  , temp_5_min(0)
  , temp_5_max(0)
  , temp_6_curr(0)
  , temp_6_min(0)
  , temp_6_max(0)
  , akku_voltage_curr(0)
  , akku_voltage_min(0)
  , akku_voltage_max(0)
  , hals_motor_voltage_curr(0)
  , hals_motor_voltage_min(0)
  , hals_motor_voltage_max(0)
  , hals_logik_voltage_curr(0)
  , hals_logik_voltage_min(0)
  , hals_logik_voltage_max(0)
  , tablett_logik_voltage_curr(0)
  , tablett_logik_voltage_min(0)
  , tablett_logik_voltage_max(0)
  , arm_logik_voltage_curr(0)
  , arm_logik_voltage_min(0)
  , arm_logik_voltage_max(0)
  , tablett_motor_voltage_curr(0)
  , tablett_motor_voltage_min(0)
  , tablett_motor_voltage_max(0)
  , hals_motor_current_curr(0)
  , hals_motor_current_min(0)
  , hals_motor_current_max(0)
  , hals_logik_current_curr(0)
  , hals_logik_current_min(0)
  , hals_logik_current_max(0)
  , tablett_logik_current_curr(0)
  , tablett_logik_current_min(0)
  , tablett_logik_current_max(0)
  , arm_logik_current_curr(0)
  , arm_logik_current_min(0)
  , arm_logik_current_max(0)
  , tablett_motor_current_curr(0)
  , tablett_motor_current_min(0)
  , tablett_motor_current_max(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _temp_1_curr_type;
  uint8_t temp_1_curr;

  typedef uint8_t _temp_1_min_type;
  uint8_t temp_1_min;

  typedef uint8_t _temp_1_max_type;
  uint8_t temp_1_max;

  typedef uint8_t _temp_2_curr_type;
  uint8_t temp_2_curr;

  typedef uint8_t _temp_2_min_type;
  uint8_t temp_2_min;

  typedef uint8_t _temp_2_max_type;
  uint8_t temp_2_max;

  typedef uint8_t _temp_3_curr_type;
  uint8_t temp_3_curr;

  typedef uint8_t _temp_3_min_type;
  uint8_t temp_3_min;

  typedef uint8_t _temp_3_max_type;
  uint8_t temp_3_max;

  typedef uint8_t _temp_4_curr_type;
  uint8_t temp_4_curr;

  typedef uint8_t _temp_4_min_type;
  uint8_t temp_4_min;

  typedef uint8_t _temp_4_max_type;
  uint8_t temp_4_max;

  typedef uint8_t _temp_5_curr_type;
  uint8_t temp_5_curr;

  typedef uint8_t _temp_5_min_type;
  uint8_t temp_5_min;

  typedef uint8_t _temp_5_max_type;
  uint8_t temp_5_max;

  typedef uint8_t _temp_6_curr_type;
  uint8_t temp_6_curr;

  typedef uint8_t _temp_6_min_type;
  uint8_t temp_6_min;

  typedef uint8_t _temp_6_max_type;
  uint8_t temp_6_max;

  typedef uint8_t _akku_voltage_curr_type;
  uint8_t akku_voltage_curr;

  typedef uint8_t _akku_voltage_min_type;
  uint8_t akku_voltage_min;

  typedef uint8_t _akku_voltage_max_type;
  uint8_t akku_voltage_max;

  typedef uint8_t _hals_motor_voltage_curr_type;
  uint8_t hals_motor_voltage_curr;

  typedef uint8_t _hals_motor_voltage_min_type;
  uint8_t hals_motor_voltage_min;

  typedef uint8_t _hals_motor_voltage_max_type;
  uint8_t hals_motor_voltage_max;

  typedef uint8_t _hals_logik_voltage_curr_type;
  uint8_t hals_logik_voltage_curr;

  typedef uint8_t _hals_logik_voltage_min_type;
  uint8_t hals_logik_voltage_min;

  typedef uint8_t _hals_logik_voltage_max_type;
  uint8_t hals_logik_voltage_max;

  typedef uint8_t _tablett_logik_voltage_curr_type;
  uint8_t tablett_logik_voltage_curr;

  typedef uint8_t _tablett_logik_voltage_min_type;
  uint8_t tablett_logik_voltage_min;

  typedef uint8_t _tablett_logik_voltage_max_type;
  uint8_t tablett_logik_voltage_max;

  typedef uint8_t _arm_logik_voltage_curr_type;
  uint8_t arm_logik_voltage_curr;

  typedef uint8_t _arm_logik_voltage_min_type;
  uint8_t arm_logik_voltage_min;

  typedef uint8_t _arm_logik_voltage_max_type;
  uint8_t arm_logik_voltage_max;

  typedef uint8_t _tablett_motor_voltage_curr_type;
  uint8_t tablett_motor_voltage_curr;

  typedef uint8_t _tablett_motor_voltage_min_type;
  uint8_t tablett_motor_voltage_min;

  typedef uint8_t _tablett_motor_voltage_max_type;
  uint8_t tablett_motor_voltage_max;

  typedef uint8_t _hals_motor_current_curr_type;
  uint8_t hals_motor_current_curr;

  typedef uint8_t _hals_motor_current_min_type;
  uint8_t hals_motor_current_min;

  typedef uint8_t _hals_motor_current_max_type;
  uint8_t hals_motor_current_max;

  typedef uint8_t _hals_logik_current_curr_type;
  uint8_t hals_logik_current_curr;

  typedef uint8_t _hals_logik_current_min_type;
  uint8_t hals_logik_current_min;

  typedef uint8_t _hals_logik_current_max_type;
  uint8_t hals_logik_current_max;

  typedef uint8_t _tablett_logik_current_curr_type;
  uint8_t tablett_logik_current_curr;

  typedef uint8_t _tablett_logik_current_min_type;
  uint8_t tablett_logik_current_min;

  typedef uint8_t _tablett_logik_current_max_type;
  uint8_t tablett_logik_current_max;

  typedef uint8_t _arm_logik_current_curr_type;
  uint8_t arm_logik_current_curr;

  typedef uint8_t _arm_logik_current_min_type;
  uint8_t arm_logik_current_min;

  typedef uint8_t _arm_logik_current_max_type;
  uint8_t arm_logik_current_max;

  typedef uint8_t _tablett_motor_current_curr_type;
  uint8_t tablett_motor_current_curr;

  typedef uint8_t _tablett_motor_current_min_type;
  uint8_t tablett_motor_current_min;

  typedef uint8_t _tablett_motor_current_max_type;
  uint8_t tablett_motor_current_max;


private:
  static const char* __s_getDataType_() { return "cob_hwmonitor/hw_msg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "decf8e5a69c1bdb66194b1b2788e3602"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
uint8 temp_1_curr\n\
uint8 temp_1_min\n\
uint8 temp_1_max\n\
uint8 temp_2_curr\n\
uint8 temp_2_min\n\
uint8 temp_2_max\n\
uint8 temp_3_curr\n\
uint8 temp_3_min\n\
uint8 temp_3_max\n\
uint8 temp_4_curr\n\
uint8 temp_4_min\n\
uint8 temp_4_max\n\
uint8 temp_5_curr\n\
uint8 temp_5_min\n\
uint8 temp_5_max\n\
uint8 temp_6_curr\n\
uint8 temp_6_min\n\
uint8 temp_6_max\n\
uint8 akku_voltage_curr\n\
uint8 akku_voltage_min\n\
uint8 akku_voltage_max\n\
uint8 hals_motor_voltage_curr\n\
uint8 hals_motor_voltage_min\n\
uint8 hals_motor_voltage_max\n\
uint8 hals_logik_voltage_curr\n\
uint8 hals_logik_voltage_min\n\
uint8 hals_logik_voltage_max\n\
uint8 tablett_logik_voltage_curr\n\
uint8 tablett_logik_voltage_min\n\
uint8 tablett_logik_voltage_max\n\
uint8 arm_logik_voltage_curr\n\
uint8 arm_logik_voltage_min\n\
uint8 arm_logik_voltage_max\n\
uint8 tablett_motor_voltage_curr\n\
uint8 tablett_motor_voltage_min\n\
uint8 tablett_motor_voltage_max\n\
uint8 hals_motor_current_curr\n\
uint8 hals_motor_current_min\n\
uint8 hals_motor_current_max\n\
uint8 hals_logik_current_curr\n\
uint8 hals_logik_current_min\n\
uint8 hals_logik_current_max\n\
uint8 tablett_logik_current_curr\n\
uint8 tablett_logik_current_min\n\
uint8 tablett_logik_current_max\n\
uint8 arm_logik_current_curr\n\
uint8 arm_logik_current_min\n\
uint8 arm_logik_current_max\n\
uint8 tablett_motor_current_curr\n\
uint8 tablett_motor_current_min\n\
uint8 tablett_motor_current_max\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, temp_1_curr);
    ros::serialization::serialize(stream, temp_1_min);
    ros::serialization::serialize(stream, temp_1_max);
    ros::serialization::serialize(stream, temp_2_curr);
    ros::serialization::serialize(stream, temp_2_min);
    ros::serialization::serialize(stream, temp_2_max);
    ros::serialization::serialize(stream, temp_3_curr);
    ros::serialization::serialize(stream, temp_3_min);
    ros::serialization::serialize(stream, temp_3_max);
    ros::serialization::serialize(stream, temp_4_curr);
    ros::serialization::serialize(stream, temp_4_min);
    ros::serialization::serialize(stream, temp_4_max);
    ros::serialization::serialize(stream, temp_5_curr);
    ros::serialization::serialize(stream, temp_5_min);
    ros::serialization::serialize(stream, temp_5_max);
    ros::serialization::serialize(stream, temp_6_curr);
    ros::serialization::serialize(stream, temp_6_min);
    ros::serialization::serialize(stream, temp_6_max);
    ros::serialization::serialize(stream, akku_voltage_curr);
    ros::serialization::serialize(stream, akku_voltage_min);
    ros::serialization::serialize(stream, akku_voltage_max);
    ros::serialization::serialize(stream, hals_motor_voltage_curr);
    ros::serialization::serialize(stream, hals_motor_voltage_min);
    ros::serialization::serialize(stream, hals_motor_voltage_max);
    ros::serialization::serialize(stream, hals_logik_voltage_curr);
    ros::serialization::serialize(stream, hals_logik_voltage_min);
    ros::serialization::serialize(stream, hals_logik_voltage_max);
    ros::serialization::serialize(stream, tablett_logik_voltage_curr);
    ros::serialization::serialize(stream, tablett_logik_voltage_min);
    ros::serialization::serialize(stream, tablett_logik_voltage_max);
    ros::serialization::serialize(stream, arm_logik_voltage_curr);
    ros::serialization::serialize(stream, arm_logik_voltage_min);
    ros::serialization::serialize(stream, arm_logik_voltage_max);
    ros::serialization::serialize(stream, tablett_motor_voltage_curr);
    ros::serialization::serialize(stream, tablett_motor_voltage_min);
    ros::serialization::serialize(stream, tablett_motor_voltage_max);
    ros::serialization::serialize(stream, hals_motor_current_curr);
    ros::serialization::serialize(stream, hals_motor_current_min);
    ros::serialization::serialize(stream, hals_motor_current_max);
    ros::serialization::serialize(stream, hals_logik_current_curr);
    ros::serialization::serialize(stream, hals_logik_current_min);
    ros::serialization::serialize(stream, hals_logik_current_max);
    ros::serialization::serialize(stream, tablett_logik_current_curr);
    ros::serialization::serialize(stream, tablett_logik_current_min);
    ros::serialization::serialize(stream, tablett_logik_current_max);
    ros::serialization::serialize(stream, arm_logik_current_curr);
    ros::serialization::serialize(stream, arm_logik_current_min);
    ros::serialization::serialize(stream, arm_logik_current_max);
    ros::serialization::serialize(stream, tablett_motor_current_curr);
    ros::serialization::serialize(stream, tablett_motor_current_min);
    ros::serialization::serialize(stream, tablett_motor_current_max);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, temp_1_curr);
    ros::serialization::deserialize(stream, temp_1_min);
    ros::serialization::deserialize(stream, temp_1_max);
    ros::serialization::deserialize(stream, temp_2_curr);
    ros::serialization::deserialize(stream, temp_2_min);
    ros::serialization::deserialize(stream, temp_2_max);
    ros::serialization::deserialize(stream, temp_3_curr);
    ros::serialization::deserialize(stream, temp_3_min);
    ros::serialization::deserialize(stream, temp_3_max);
    ros::serialization::deserialize(stream, temp_4_curr);
    ros::serialization::deserialize(stream, temp_4_min);
    ros::serialization::deserialize(stream, temp_4_max);
    ros::serialization::deserialize(stream, temp_5_curr);
    ros::serialization::deserialize(stream, temp_5_min);
    ros::serialization::deserialize(stream, temp_5_max);
    ros::serialization::deserialize(stream, temp_6_curr);
    ros::serialization::deserialize(stream, temp_6_min);
    ros::serialization::deserialize(stream, temp_6_max);
    ros::serialization::deserialize(stream, akku_voltage_curr);
    ros::serialization::deserialize(stream, akku_voltage_min);
    ros::serialization::deserialize(stream, akku_voltage_max);
    ros::serialization::deserialize(stream, hals_motor_voltage_curr);
    ros::serialization::deserialize(stream, hals_motor_voltage_min);
    ros::serialization::deserialize(stream, hals_motor_voltage_max);
    ros::serialization::deserialize(stream, hals_logik_voltage_curr);
    ros::serialization::deserialize(stream, hals_logik_voltage_min);
    ros::serialization::deserialize(stream, hals_logik_voltage_max);
    ros::serialization::deserialize(stream, tablett_logik_voltage_curr);
    ros::serialization::deserialize(stream, tablett_logik_voltage_min);
    ros::serialization::deserialize(stream, tablett_logik_voltage_max);
    ros::serialization::deserialize(stream, arm_logik_voltage_curr);
    ros::serialization::deserialize(stream, arm_logik_voltage_min);
    ros::serialization::deserialize(stream, arm_logik_voltage_max);
    ros::serialization::deserialize(stream, tablett_motor_voltage_curr);
    ros::serialization::deserialize(stream, tablett_motor_voltage_min);
    ros::serialization::deserialize(stream, tablett_motor_voltage_max);
    ros::serialization::deserialize(stream, hals_motor_current_curr);
    ros::serialization::deserialize(stream, hals_motor_current_min);
    ros::serialization::deserialize(stream, hals_motor_current_max);
    ros::serialization::deserialize(stream, hals_logik_current_curr);
    ros::serialization::deserialize(stream, hals_logik_current_min);
    ros::serialization::deserialize(stream, hals_logik_current_max);
    ros::serialization::deserialize(stream, tablett_logik_current_curr);
    ros::serialization::deserialize(stream, tablett_logik_current_min);
    ros::serialization::deserialize(stream, tablett_logik_current_max);
    ros::serialization::deserialize(stream, arm_logik_current_curr);
    ros::serialization::deserialize(stream, arm_logik_current_min);
    ros::serialization::deserialize(stream, arm_logik_current_max);
    ros::serialization::deserialize(stream, tablett_motor_current_curr);
    ros::serialization::deserialize(stream, tablett_motor_current_min);
    ros::serialization::deserialize(stream, tablett_motor_current_max);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(temp_1_curr);
    size += ros::serialization::serializationLength(temp_1_min);
    size += ros::serialization::serializationLength(temp_1_max);
    size += ros::serialization::serializationLength(temp_2_curr);
    size += ros::serialization::serializationLength(temp_2_min);
    size += ros::serialization::serializationLength(temp_2_max);
    size += ros::serialization::serializationLength(temp_3_curr);
    size += ros::serialization::serializationLength(temp_3_min);
    size += ros::serialization::serializationLength(temp_3_max);
    size += ros::serialization::serializationLength(temp_4_curr);
    size += ros::serialization::serializationLength(temp_4_min);
    size += ros::serialization::serializationLength(temp_4_max);
    size += ros::serialization::serializationLength(temp_5_curr);
    size += ros::serialization::serializationLength(temp_5_min);
    size += ros::serialization::serializationLength(temp_5_max);
    size += ros::serialization::serializationLength(temp_6_curr);
    size += ros::serialization::serializationLength(temp_6_min);
    size += ros::serialization::serializationLength(temp_6_max);
    size += ros::serialization::serializationLength(akku_voltage_curr);
    size += ros::serialization::serializationLength(akku_voltage_min);
    size += ros::serialization::serializationLength(akku_voltage_max);
    size += ros::serialization::serializationLength(hals_motor_voltage_curr);
    size += ros::serialization::serializationLength(hals_motor_voltage_min);
    size += ros::serialization::serializationLength(hals_motor_voltage_max);
    size += ros::serialization::serializationLength(hals_logik_voltage_curr);
    size += ros::serialization::serializationLength(hals_logik_voltage_min);
    size += ros::serialization::serializationLength(hals_logik_voltage_max);
    size += ros::serialization::serializationLength(tablett_logik_voltage_curr);
    size += ros::serialization::serializationLength(tablett_logik_voltage_min);
    size += ros::serialization::serializationLength(tablett_logik_voltage_max);
    size += ros::serialization::serializationLength(arm_logik_voltage_curr);
    size += ros::serialization::serializationLength(arm_logik_voltage_min);
    size += ros::serialization::serializationLength(arm_logik_voltage_max);
    size += ros::serialization::serializationLength(tablett_motor_voltage_curr);
    size += ros::serialization::serializationLength(tablett_motor_voltage_min);
    size += ros::serialization::serializationLength(tablett_motor_voltage_max);
    size += ros::serialization::serializationLength(hals_motor_current_curr);
    size += ros::serialization::serializationLength(hals_motor_current_min);
    size += ros::serialization::serializationLength(hals_motor_current_max);
    size += ros::serialization::serializationLength(hals_logik_current_curr);
    size += ros::serialization::serializationLength(hals_logik_current_min);
    size += ros::serialization::serializationLength(hals_logik_current_max);
    size += ros::serialization::serializationLength(tablett_logik_current_curr);
    size += ros::serialization::serializationLength(tablett_logik_current_min);
    size += ros::serialization::serializationLength(tablett_logik_current_max);
    size += ros::serialization::serializationLength(arm_logik_current_curr);
    size += ros::serialization::serializationLength(arm_logik_current_min);
    size += ros::serialization::serializationLength(arm_logik_current_max);
    size += ros::serialization::serializationLength(tablett_motor_current_curr);
    size += ros::serialization::serializationLength(tablett_motor_current_min);
    size += ros::serialization::serializationLength(tablett_motor_current_max);
    return size;
  }

  typedef boost::shared_ptr< ::cob_hwmonitor::hw_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_hwmonitor::hw_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct hw_msg
typedef  ::cob_hwmonitor::hw_msg_<std::allocator<void> > hw_msg;

typedef boost::shared_ptr< ::cob_hwmonitor::hw_msg> hw_msgPtr;
typedef boost::shared_ptr< ::cob_hwmonitor::hw_msg const> hw_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_hwmonitor::hw_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_hwmonitor::hw_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_hwmonitor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::cob_hwmonitor::hw_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "decf8e5a69c1bdb66194b1b2788e3602";
  }

  static const char* value(const  ::cob_hwmonitor::hw_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdecf8e5a69c1bdb6ULL;
  static const uint64_t static_value2 = 0x6194b1b2788e3602ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_hwmonitor::hw_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_hwmonitor/hw_msg";
  }

  static const char* value(const  ::cob_hwmonitor::hw_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_hwmonitor::hw_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 temp_1_curr\n\
uint8 temp_1_min\n\
uint8 temp_1_max\n\
uint8 temp_2_curr\n\
uint8 temp_2_min\n\
uint8 temp_2_max\n\
uint8 temp_3_curr\n\
uint8 temp_3_min\n\
uint8 temp_3_max\n\
uint8 temp_4_curr\n\
uint8 temp_4_min\n\
uint8 temp_4_max\n\
uint8 temp_5_curr\n\
uint8 temp_5_min\n\
uint8 temp_5_max\n\
uint8 temp_6_curr\n\
uint8 temp_6_min\n\
uint8 temp_6_max\n\
uint8 akku_voltage_curr\n\
uint8 akku_voltage_min\n\
uint8 akku_voltage_max\n\
uint8 hals_motor_voltage_curr\n\
uint8 hals_motor_voltage_min\n\
uint8 hals_motor_voltage_max\n\
uint8 hals_logik_voltage_curr\n\
uint8 hals_logik_voltage_min\n\
uint8 hals_logik_voltage_max\n\
uint8 tablett_logik_voltage_curr\n\
uint8 tablett_logik_voltage_min\n\
uint8 tablett_logik_voltage_max\n\
uint8 arm_logik_voltage_curr\n\
uint8 arm_logik_voltage_min\n\
uint8 arm_logik_voltage_max\n\
uint8 tablett_motor_voltage_curr\n\
uint8 tablett_motor_voltage_min\n\
uint8 tablett_motor_voltage_max\n\
uint8 hals_motor_current_curr\n\
uint8 hals_motor_current_min\n\
uint8 hals_motor_current_max\n\
uint8 hals_logik_current_curr\n\
uint8 hals_logik_current_min\n\
uint8 hals_logik_current_max\n\
uint8 tablett_logik_current_curr\n\
uint8 tablett_logik_current_min\n\
uint8 tablett_logik_current_max\n\
uint8 arm_logik_current_curr\n\
uint8 arm_logik_current_min\n\
uint8 arm_logik_current_max\n\
uint8 tablett_motor_current_curr\n\
uint8 tablett_motor_current_min\n\
uint8 tablett_motor_current_max\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::cob_hwmonitor::hw_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::cob_hwmonitor::hw_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::cob_hwmonitor::hw_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_hwmonitor::hw_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.temp_1_curr);
    stream.next(m.temp_1_min);
    stream.next(m.temp_1_max);
    stream.next(m.temp_2_curr);
    stream.next(m.temp_2_min);
    stream.next(m.temp_2_max);
    stream.next(m.temp_3_curr);
    stream.next(m.temp_3_min);
    stream.next(m.temp_3_max);
    stream.next(m.temp_4_curr);
    stream.next(m.temp_4_min);
    stream.next(m.temp_4_max);
    stream.next(m.temp_5_curr);
    stream.next(m.temp_5_min);
    stream.next(m.temp_5_max);
    stream.next(m.temp_6_curr);
    stream.next(m.temp_6_min);
    stream.next(m.temp_6_max);
    stream.next(m.akku_voltage_curr);
    stream.next(m.akku_voltage_min);
    stream.next(m.akku_voltage_max);
    stream.next(m.hals_motor_voltage_curr);
    stream.next(m.hals_motor_voltage_min);
    stream.next(m.hals_motor_voltage_max);
    stream.next(m.hals_logik_voltage_curr);
    stream.next(m.hals_logik_voltage_min);
    stream.next(m.hals_logik_voltage_max);
    stream.next(m.tablett_logik_voltage_curr);
    stream.next(m.tablett_logik_voltage_min);
    stream.next(m.tablett_logik_voltage_max);
    stream.next(m.arm_logik_voltage_curr);
    stream.next(m.arm_logik_voltage_min);
    stream.next(m.arm_logik_voltage_max);
    stream.next(m.tablett_motor_voltage_curr);
    stream.next(m.tablett_motor_voltage_min);
    stream.next(m.tablett_motor_voltage_max);
    stream.next(m.hals_motor_current_curr);
    stream.next(m.hals_motor_current_min);
    stream.next(m.hals_motor_current_max);
    stream.next(m.hals_logik_current_curr);
    stream.next(m.hals_logik_current_min);
    stream.next(m.hals_logik_current_max);
    stream.next(m.tablett_logik_current_curr);
    stream.next(m.tablett_logik_current_min);
    stream.next(m.tablett_logik_current_max);
    stream.next(m.arm_logik_current_curr);
    stream.next(m.arm_logik_current_min);
    stream.next(m.arm_logik_current_max);
    stream.next(m.tablett_motor_current_curr);
    stream.next(m.tablett_motor_current_min);
    stream.next(m.tablett_motor_current_max);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hw_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_hwmonitor::hw_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_hwmonitor::hw_msg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "temp_1_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_1_curr);
    s << indent << "temp_1_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_1_min);
    s << indent << "temp_1_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_1_max);
    s << indent << "temp_2_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_2_curr);
    s << indent << "temp_2_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_2_min);
    s << indent << "temp_2_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_2_max);
    s << indent << "temp_3_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_3_curr);
    s << indent << "temp_3_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_3_min);
    s << indent << "temp_3_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_3_max);
    s << indent << "temp_4_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_4_curr);
    s << indent << "temp_4_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_4_min);
    s << indent << "temp_4_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_4_max);
    s << indent << "temp_5_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_5_curr);
    s << indent << "temp_5_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_5_min);
    s << indent << "temp_5_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_5_max);
    s << indent << "temp_6_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_6_curr);
    s << indent << "temp_6_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_6_min);
    s << indent << "temp_6_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temp_6_max);
    s << indent << "akku_voltage_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.akku_voltage_curr);
    s << indent << "akku_voltage_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.akku_voltage_min);
    s << indent << "akku_voltage_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.akku_voltage_max);
    s << indent << "hals_motor_voltage_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_motor_voltage_curr);
    s << indent << "hals_motor_voltage_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_motor_voltage_min);
    s << indent << "hals_motor_voltage_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_motor_voltage_max);
    s << indent << "hals_logik_voltage_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_logik_voltage_curr);
    s << indent << "hals_logik_voltage_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_logik_voltage_min);
    s << indent << "hals_logik_voltage_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_logik_voltage_max);
    s << indent << "tablett_logik_voltage_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_logik_voltage_curr);
    s << indent << "tablett_logik_voltage_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_logik_voltage_min);
    s << indent << "tablett_logik_voltage_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_logik_voltage_max);
    s << indent << "arm_logik_voltage_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_logik_voltage_curr);
    s << indent << "arm_logik_voltage_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_logik_voltage_min);
    s << indent << "arm_logik_voltage_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_logik_voltage_max);
    s << indent << "tablett_motor_voltage_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_motor_voltage_curr);
    s << indent << "tablett_motor_voltage_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_motor_voltage_min);
    s << indent << "tablett_motor_voltage_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_motor_voltage_max);
    s << indent << "hals_motor_current_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_motor_current_curr);
    s << indent << "hals_motor_current_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_motor_current_min);
    s << indent << "hals_motor_current_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_motor_current_max);
    s << indent << "hals_logik_current_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_logik_current_curr);
    s << indent << "hals_logik_current_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_logik_current_min);
    s << indent << "hals_logik_current_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hals_logik_current_max);
    s << indent << "tablett_logik_current_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_logik_current_curr);
    s << indent << "tablett_logik_current_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_logik_current_min);
    s << indent << "tablett_logik_current_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_logik_current_max);
    s << indent << "arm_logik_current_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_logik_current_curr);
    s << indent << "arm_logik_current_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_logik_current_min);
    s << indent << "arm_logik_current_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_logik_current_max);
    s << indent << "tablett_motor_current_curr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_motor_current_curr);
    s << indent << "tablett_motor_current_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_motor_current_min);
    s << indent << "tablett_motor_current_max: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tablett_motor_current_max);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_HWMONITOR_MESSAGE_HW_MSG_H

