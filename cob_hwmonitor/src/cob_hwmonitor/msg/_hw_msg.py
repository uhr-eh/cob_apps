"""autogenerated by genmsg_py from hw_msg.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg

class hw_msg(roslib.message.Message):
  _md5sum = "decf8e5a69c1bdb66194b1b2788e3602"
  _type = "cob_hwmonitor/hw_msg"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint8 temp_1_curr
uint8 temp_1_min
uint8 temp_1_max
uint8 temp_2_curr
uint8 temp_2_min
uint8 temp_2_max
uint8 temp_3_curr
uint8 temp_3_min
uint8 temp_3_max
uint8 temp_4_curr
uint8 temp_4_min
uint8 temp_4_max
uint8 temp_5_curr
uint8 temp_5_min
uint8 temp_5_max
uint8 temp_6_curr
uint8 temp_6_min
uint8 temp_6_max
uint8 akku_voltage_curr
uint8 akku_voltage_min
uint8 akku_voltage_max
uint8 hals_motor_voltage_curr
uint8 hals_motor_voltage_min
uint8 hals_motor_voltage_max
uint8 hals_logik_voltage_curr
uint8 hals_logik_voltage_min
uint8 hals_logik_voltage_max
uint8 tablett_logik_voltage_curr
uint8 tablett_logik_voltage_min
uint8 tablett_logik_voltage_max
uint8 arm_logik_voltage_curr
uint8 arm_logik_voltage_min
uint8 arm_logik_voltage_max
uint8 tablett_motor_voltage_curr
uint8 tablett_motor_voltage_min
uint8 tablett_motor_voltage_max
uint8 hals_motor_current_curr
uint8 hals_motor_current_min
uint8 hals_motor_current_max
uint8 hals_logik_current_curr
uint8 hals_logik_current_min
uint8 hals_logik_current_max
uint8 tablett_logik_current_curr
uint8 tablett_logik_current_min
uint8 tablett_logik_current_max
uint8 arm_logik_current_curr
uint8 arm_logik_current_min
uint8 arm_logik_current_max
uint8 tablett_motor_current_curr
uint8 tablett_motor_current_min
uint8 tablett_motor_current_max
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','temp_1_curr','temp_1_min','temp_1_max','temp_2_curr','temp_2_min','temp_2_max','temp_3_curr','temp_3_min','temp_3_max','temp_4_curr','temp_4_min','temp_4_max','temp_5_curr','temp_5_min','temp_5_max','temp_6_curr','temp_6_min','temp_6_max','akku_voltage_curr','akku_voltage_min','akku_voltage_max','hals_motor_voltage_curr','hals_motor_voltage_min','hals_motor_voltage_max','hals_logik_voltage_curr','hals_logik_voltage_min','hals_logik_voltage_max','tablett_logik_voltage_curr','tablett_logik_voltage_min','tablett_logik_voltage_max','arm_logik_voltage_curr','arm_logik_voltage_min','arm_logik_voltage_max','tablett_motor_voltage_curr','tablett_motor_voltage_min','tablett_motor_voltage_max','hals_motor_current_curr','hals_motor_current_min','hals_motor_current_max','hals_logik_current_curr','hals_logik_current_min','hals_logik_current_max','tablett_logik_current_curr','tablett_logik_current_min','tablett_logik_current_max','arm_logik_current_curr','arm_logik_current_min','arm_logik_current_max','tablett_motor_current_curr','tablett_motor_current_min','tablett_motor_current_max']
  _slot_types = ['Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,temp_1_curr,temp_1_min,temp_1_max,temp_2_curr,temp_2_min,temp_2_max,temp_3_curr,temp_3_min,temp_3_max,temp_4_curr,temp_4_min,temp_4_max,temp_5_curr,temp_5_min,temp_5_max,temp_6_curr,temp_6_min,temp_6_max,akku_voltage_curr,akku_voltage_min,akku_voltage_max,hals_motor_voltage_curr,hals_motor_voltage_min,hals_motor_voltage_max,hals_logik_voltage_curr,hals_logik_voltage_min,hals_logik_voltage_max,tablett_logik_voltage_curr,tablett_logik_voltage_min,tablett_logik_voltage_max,arm_logik_voltage_curr,arm_logik_voltage_min,arm_logik_voltage_max,tablett_motor_voltage_curr,tablett_motor_voltage_min,tablett_motor_voltage_max,hals_motor_current_curr,hals_motor_current_min,hals_motor_current_max,hals_logik_current_curr,hals_logik_current_min,hals_logik_current_max,tablett_logik_current_curr,tablett_logik_current_min,tablett_logik_current_max,arm_logik_current_curr,arm_logik_current_min,arm_logik_current_max,tablett_motor_current_curr,tablett_motor_current_min,tablett_motor_current_max
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(hw_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.temp_1_curr is None:
        self.temp_1_curr = 0
      if self.temp_1_min is None:
        self.temp_1_min = 0
      if self.temp_1_max is None:
        self.temp_1_max = 0
      if self.temp_2_curr is None:
        self.temp_2_curr = 0
      if self.temp_2_min is None:
        self.temp_2_min = 0
      if self.temp_2_max is None:
        self.temp_2_max = 0
      if self.temp_3_curr is None:
        self.temp_3_curr = 0
      if self.temp_3_min is None:
        self.temp_3_min = 0
      if self.temp_3_max is None:
        self.temp_3_max = 0
      if self.temp_4_curr is None:
        self.temp_4_curr = 0
      if self.temp_4_min is None:
        self.temp_4_min = 0
      if self.temp_4_max is None:
        self.temp_4_max = 0
      if self.temp_5_curr is None:
        self.temp_5_curr = 0
      if self.temp_5_min is None:
        self.temp_5_min = 0
      if self.temp_5_max is None:
        self.temp_5_max = 0
      if self.temp_6_curr is None:
        self.temp_6_curr = 0
      if self.temp_6_min is None:
        self.temp_6_min = 0
      if self.temp_6_max is None:
        self.temp_6_max = 0
      if self.akku_voltage_curr is None:
        self.akku_voltage_curr = 0
      if self.akku_voltage_min is None:
        self.akku_voltage_min = 0
      if self.akku_voltage_max is None:
        self.akku_voltage_max = 0
      if self.hals_motor_voltage_curr is None:
        self.hals_motor_voltage_curr = 0
      if self.hals_motor_voltage_min is None:
        self.hals_motor_voltage_min = 0
      if self.hals_motor_voltage_max is None:
        self.hals_motor_voltage_max = 0
      if self.hals_logik_voltage_curr is None:
        self.hals_logik_voltage_curr = 0
      if self.hals_logik_voltage_min is None:
        self.hals_logik_voltage_min = 0
      if self.hals_logik_voltage_max is None:
        self.hals_logik_voltage_max = 0
      if self.tablett_logik_voltage_curr is None:
        self.tablett_logik_voltage_curr = 0
      if self.tablett_logik_voltage_min is None:
        self.tablett_logik_voltage_min = 0
      if self.tablett_logik_voltage_max is None:
        self.tablett_logik_voltage_max = 0
      if self.arm_logik_voltage_curr is None:
        self.arm_logik_voltage_curr = 0
      if self.arm_logik_voltage_min is None:
        self.arm_logik_voltage_min = 0
      if self.arm_logik_voltage_max is None:
        self.arm_logik_voltage_max = 0
      if self.tablett_motor_voltage_curr is None:
        self.tablett_motor_voltage_curr = 0
      if self.tablett_motor_voltage_min is None:
        self.tablett_motor_voltage_min = 0
      if self.tablett_motor_voltage_max is None:
        self.tablett_motor_voltage_max = 0
      if self.hals_motor_current_curr is None:
        self.hals_motor_current_curr = 0
      if self.hals_motor_current_min is None:
        self.hals_motor_current_min = 0
      if self.hals_motor_current_max is None:
        self.hals_motor_current_max = 0
      if self.hals_logik_current_curr is None:
        self.hals_logik_current_curr = 0
      if self.hals_logik_current_min is None:
        self.hals_logik_current_min = 0
      if self.hals_logik_current_max is None:
        self.hals_logik_current_max = 0
      if self.tablett_logik_current_curr is None:
        self.tablett_logik_current_curr = 0
      if self.tablett_logik_current_min is None:
        self.tablett_logik_current_min = 0
      if self.tablett_logik_current_max is None:
        self.tablett_logik_current_max = 0
      if self.arm_logik_current_curr is None:
        self.arm_logik_current_curr = 0
      if self.arm_logik_current_min is None:
        self.arm_logik_current_min = 0
      if self.arm_logik_current_max is None:
        self.arm_logik_current_max = 0
      if self.tablett_motor_current_curr is None:
        self.tablett_motor_current_curr = 0
      if self.tablett_motor_current_min is None:
        self.tablett_motor_current_min = 0
      if self.tablett_motor_current_max is None:
        self.tablett_motor_current_max = 0
    else:
      self.header = std_msgs.msg._Header.Header()
      self.temp_1_curr = 0
      self.temp_1_min = 0
      self.temp_1_max = 0
      self.temp_2_curr = 0
      self.temp_2_min = 0
      self.temp_2_max = 0
      self.temp_3_curr = 0
      self.temp_3_min = 0
      self.temp_3_max = 0
      self.temp_4_curr = 0
      self.temp_4_min = 0
      self.temp_4_max = 0
      self.temp_5_curr = 0
      self.temp_5_min = 0
      self.temp_5_max = 0
      self.temp_6_curr = 0
      self.temp_6_min = 0
      self.temp_6_max = 0
      self.akku_voltage_curr = 0
      self.akku_voltage_min = 0
      self.akku_voltage_max = 0
      self.hals_motor_voltage_curr = 0
      self.hals_motor_voltage_min = 0
      self.hals_motor_voltage_max = 0
      self.hals_logik_voltage_curr = 0
      self.hals_logik_voltage_min = 0
      self.hals_logik_voltage_max = 0
      self.tablett_logik_voltage_curr = 0
      self.tablett_logik_voltage_min = 0
      self.tablett_logik_voltage_max = 0
      self.arm_logik_voltage_curr = 0
      self.arm_logik_voltage_min = 0
      self.arm_logik_voltage_max = 0
      self.tablett_motor_voltage_curr = 0
      self.tablett_motor_voltage_min = 0
      self.tablett_motor_voltage_max = 0
      self.hals_motor_current_curr = 0
      self.hals_motor_current_min = 0
      self.hals_motor_current_max = 0
      self.hals_logik_current_curr = 0
      self.hals_logik_current_min = 0
      self.hals_logik_current_max = 0
      self.tablett_logik_current_curr = 0
      self.tablett_logik_current_min = 0
      self.tablett_logik_current_max = 0
      self.arm_logik_current_curr = 0
      self.arm_logik_current_min = 0
      self.arm_logik_current_max = 0
      self.tablett_motor_current_curr = 0
      self.tablett_motor_current_min = 0
      self.tablett_motor_current_max = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_51B.pack(_x.temp_1_curr, _x.temp_1_min, _x.temp_1_max, _x.temp_2_curr, _x.temp_2_min, _x.temp_2_max, _x.temp_3_curr, _x.temp_3_min, _x.temp_3_max, _x.temp_4_curr, _x.temp_4_min, _x.temp_4_max, _x.temp_5_curr, _x.temp_5_min, _x.temp_5_max, _x.temp_6_curr, _x.temp_6_min, _x.temp_6_max, _x.akku_voltage_curr, _x.akku_voltage_min, _x.akku_voltage_max, _x.hals_motor_voltage_curr, _x.hals_motor_voltage_min, _x.hals_motor_voltage_max, _x.hals_logik_voltage_curr, _x.hals_logik_voltage_min, _x.hals_logik_voltage_max, _x.tablett_logik_voltage_curr, _x.tablett_logik_voltage_min, _x.tablett_logik_voltage_max, _x.arm_logik_voltage_curr, _x.arm_logik_voltage_min, _x.arm_logik_voltage_max, _x.tablett_motor_voltage_curr, _x.tablett_motor_voltage_min, _x.tablett_motor_voltage_max, _x.hals_motor_current_curr, _x.hals_motor_current_min, _x.hals_motor_current_max, _x.hals_logik_current_curr, _x.hals_logik_current_min, _x.hals_logik_current_max, _x.tablett_logik_current_curr, _x.tablett_logik_current_min, _x.tablett_logik_current_max, _x.arm_logik_current_curr, _x.arm_logik_current_min, _x.arm_logik_current_max, _x.tablett_motor_current_curr, _x.tablett_motor_current_min, _x.tablett_motor_current_max))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.temp_1_curr, _x.temp_1_min, _x.temp_1_max, _x.temp_2_curr, _x.temp_2_min, _x.temp_2_max, _x.temp_3_curr, _x.temp_3_min, _x.temp_3_max, _x.temp_4_curr, _x.temp_4_min, _x.temp_4_max, _x.temp_5_curr, _x.temp_5_min, _x.temp_5_max, _x.temp_6_curr, _x.temp_6_min, _x.temp_6_max, _x.akku_voltage_curr, _x.akku_voltage_min, _x.akku_voltage_max, _x.hals_motor_voltage_curr, _x.hals_motor_voltage_min, _x.hals_motor_voltage_max, _x.hals_logik_voltage_curr, _x.hals_logik_voltage_min, _x.hals_logik_voltage_max, _x.tablett_logik_voltage_curr, _x.tablett_logik_voltage_min, _x.tablett_logik_voltage_max, _x.arm_logik_voltage_curr, _x.arm_logik_voltage_min, _x.arm_logik_voltage_max, _x.tablett_motor_voltage_curr, _x.tablett_motor_voltage_min, _x.tablett_motor_voltage_max, _x.hals_motor_current_curr, _x.hals_motor_current_min, _x.hals_motor_current_max, _x.hals_logik_current_curr, _x.hals_logik_current_min, _x.hals_logik_current_max, _x.tablett_logik_current_curr, _x.tablett_logik_current_min, _x.tablett_logik_current_max, _x.arm_logik_current_curr, _x.arm_logik_current_min, _x.arm_logik_current_max, _x.tablett_motor_current_curr, _x.tablett_motor_current_min, _x.tablett_motor_current_max,) = _struct_51B.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_51B.pack(_x.temp_1_curr, _x.temp_1_min, _x.temp_1_max, _x.temp_2_curr, _x.temp_2_min, _x.temp_2_max, _x.temp_3_curr, _x.temp_3_min, _x.temp_3_max, _x.temp_4_curr, _x.temp_4_min, _x.temp_4_max, _x.temp_5_curr, _x.temp_5_min, _x.temp_5_max, _x.temp_6_curr, _x.temp_6_min, _x.temp_6_max, _x.akku_voltage_curr, _x.akku_voltage_min, _x.akku_voltage_max, _x.hals_motor_voltage_curr, _x.hals_motor_voltage_min, _x.hals_motor_voltage_max, _x.hals_logik_voltage_curr, _x.hals_logik_voltage_min, _x.hals_logik_voltage_max, _x.tablett_logik_voltage_curr, _x.tablett_logik_voltage_min, _x.tablett_logik_voltage_max, _x.arm_logik_voltage_curr, _x.arm_logik_voltage_min, _x.arm_logik_voltage_max, _x.tablett_motor_voltage_curr, _x.tablett_motor_voltage_min, _x.tablett_motor_voltage_max, _x.hals_motor_current_curr, _x.hals_motor_current_min, _x.hals_motor_current_max, _x.hals_logik_current_curr, _x.hals_logik_current_min, _x.hals_logik_current_max, _x.tablett_logik_current_curr, _x.tablett_logik_current_min, _x.tablett_logik_current_max, _x.arm_logik_current_curr, _x.arm_logik_current_min, _x.arm_logik_current_max, _x.tablett_motor_current_curr, _x.tablett_motor_current_min, _x.tablett_motor_current_max))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 51
      (_x.temp_1_curr, _x.temp_1_min, _x.temp_1_max, _x.temp_2_curr, _x.temp_2_min, _x.temp_2_max, _x.temp_3_curr, _x.temp_3_min, _x.temp_3_max, _x.temp_4_curr, _x.temp_4_min, _x.temp_4_max, _x.temp_5_curr, _x.temp_5_min, _x.temp_5_max, _x.temp_6_curr, _x.temp_6_min, _x.temp_6_max, _x.akku_voltage_curr, _x.akku_voltage_min, _x.akku_voltage_max, _x.hals_motor_voltage_curr, _x.hals_motor_voltage_min, _x.hals_motor_voltage_max, _x.hals_logik_voltage_curr, _x.hals_logik_voltage_min, _x.hals_logik_voltage_max, _x.tablett_logik_voltage_curr, _x.tablett_logik_voltage_min, _x.tablett_logik_voltage_max, _x.arm_logik_voltage_curr, _x.arm_logik_voltage_min, _x.arm_logik_voltage_max, _x.tablett_motor_voltage_curr, _x.tablett_motor_voltage_min, _x.tablett_motor_voltage_max, _x.hals_motor_current_curr, _x.hals_motor_current_min, _x.hals_motor_current_max, _x.hals_logik_current_curr, _x.hals_logik_current_min, _x.hals_logik_current_max, _x.tablett_logik_current_curr, _x.tablett_logik_current_min, _x.tablett_logik_current_max, _x.arm_logik_current_curr, _x.arm_logik_current_min, _x.arm_logik_current_max, _x.tablett_motor_current_curr, _x.tablett_motor_current_min, _x.tablett_motor_current_max,) = _struct_51B.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_51B = struct.Struct("<51B")
